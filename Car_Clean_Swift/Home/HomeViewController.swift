//
//  HomeViewController.swift
//  Car_Clean_Swift
//
//  Created by Alvaro Vinicius do Nascimento Fernandes on 12/12/19.
//  Copyright (c) 2019 Alvaro Vinicius do Nascimento Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol HomeDisplayLogic: class {
    func reloadCollection()
    func presentRequestFailureAlert(_ title: String, _ message: String)
}

class HomeViewController: UIViewController {

    var interactor: HomeBusinessLogic?
    var router: (HomeRoutingLogic & HomeDataPassing)?

    @IBOutlet weak var collectionView: UICollectionView!
    
    @IBOutlet weak var segment: UISegmentedControl!
    
    @IBAction func segmentAction(_ sender: Any) {
        getCars()
    }
    
    init() {
        super.init(nibName: "HomeViewController", bundle: Bundle(for: HomeViewController.self))
        setup()
    }

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        presenter.viewController = viewController
        interactor.presenter = presenter
        router.viewController = viewController
        router.dataStore = interactor
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        configureCollection()
        getCars()
    }
    
    func getCars() {
        let typeCar = interactor?.getTypeCar(segment.selectedSegmentIndex) ?? Home.Car.luxo
        interactor?.load(car: typeCar)
    }
    
    func configureCollection() {
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UINib(nibName: "CarCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "carCell")
    }

}

extension HomeViewController: HomeDisplayLogic {
    
    func presentRequestFailureAlert(_ title: String, _ message: String) {
        router?.showError(title, message)
    }
    
    func reloadCollection() {
        collectionView.reloadData()
    }
    
}

extension HomeViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return interactor?.numberOfRows ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "carCell", for: indexPath) as? CarCollectionViewCell
        cell?.configure(interactor?.cellForRow(at: indexPath.row))
        return cell ?? UICollectionViewCell()
    }
    
}
