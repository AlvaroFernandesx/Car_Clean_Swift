// MARK: - Mocks generated from file: Car_Clean_Swift/Home/HomeInteractor.swift at 2019-12-23 17:43:24 +0000

//
//  HomeInteractor.swift
//  Car_Clean_Swift
//
//  Created by Alvaro Vinicius do Nascimento Fernandes on 12/12/19.
//  Copyright (c) 2019 Alvaro Vinicius do Nascimento Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import Cuckoo
@testable import Car_Clean_Swift

import UIKit


 class MockHomeBusinessLogic: HomeBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomeBusinessLogic
    
     typealias Stubbing = __StubbingProxy_HomeBusinessLogic
     typealias Verification = __VerificationProxy_HomeBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomeBusinessLogic?

     func enableDefaultImplementation(_ stub: HomeBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var numberOfRows: Int {
        get {
            return cuckoo_manager.getter("numberOfRows",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.numberOfRows)
        }
        
    }
    

    

    
    
    
     func load(car: Home.Car)  {
        
    return cuckoo_manager.call("load(car: Home.Car)",
            parameters: (car),
            escapingParameters: (car),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.load(car: car))
        
    }
    
    
    
     func cellForRow(at index: Int) -> Home.CarModels.Carro? {
        
    return cuckoo_manager.call("cellForRow(at: Int) -> Home.CarModels.Carro?",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.cellForRow(at: index))
        
    }
    
    
    
     func getTypeCar(_ number: Int) -> Home.Car {
        
    return cuckoo_manager.call("getTypeCar(_: Int) -> Home.Car",
            parameters: (number),
            escapingParameters: (number),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.getTypeCar(number))
        
    }
    

	 struct __StubbingProxy_HomeBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var numberOfRows: Cuckoo.ProtocolToBeStubbedReadOnlyProperty<MockHomeBusinessLogic, Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows")
	    }
	    
	    
	    func load<M1: Cuckoo.Matchable>(car: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Home.Car)> where M1.MatchedType == Home.Car {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.Car)>] = [wrap(matchable: car) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeBusinessLogic.self, method: "load(car: Home.Car)", parameterMatchers: matchers))
	    }
	    
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ProtocolStubFunction<(Int), Home.CarModels.Carro?> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeBusinessLogic.self, method: "cellForRow(at: Int) -> Home.CarModels.Carro?", parameterMatchers: matchers))
	    }
	    
	    func getTypeCar<M1: Cuckoo.Matchable>(_ number: M1) -> Cuckoo.ProtocolStubFunction<(Int), Home.Car> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: number) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeBusinessLogic.self, method: "getTypeCar(_: Int) -> Home.Car", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var numberOfRows: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func load<M1: Cuckoo.Matchable>(car: M1) -> Cuckoo.__DoNotUse<(Home.Car), Void> where M1.MatchedType == Home.Car {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.Car)>] = [wrap(matchable: car) { $0 }]
	        return cuckoo_manager.verify("load(car: Home.Car)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), Home.CarModels.Carro?> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("cellForRow(at: Int) -> Home.CarModels.Carro?", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func getTypeCar<M1: Cuckoo.Matchable>(_ number: M1) -> Cuckoo.__DoNotUse<(Int), Home.Car> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: number) { $0 }]
	        return cuckoo_manager.verify("getTypeCar(_: Int) -> Home.Car", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeBusinessLogicStub: HomeBusinessLogic {
    
    
     var numberOfRows: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     func load(car: Home.Car)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func cellForRow(at index: Int) -> Home.CarModels.Carro?  {
        return DefaultValueRegistry.defaultValue(for: (Home.CarModels.Carro?).self)
    }
    
     func getTypeCar(_ number: Int) -> Home.Car  {
        return DefaultValueRegistry.defaultValue(for: (Home.Car).self)
    }
    
}



 class MockHomeDataStore: HomeDataStore, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomeDataStore
    
     typealias Stubbing = __StubbingProxy_HomeDataStore
     typealias Verification = __VerificationProxy_HomeDataStore

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomeDataStore?

     func enableDefaultImplementation(_ stub: HomeDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    

	 struct __StubbingProxy_HomeDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	}

	 struct __VerificationProxy_HomeDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	}
}

 class HomeDataStoreStub: HomeDataStore {
    

    

    
}



 class MockHomeInteractor: HomeInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = HomeInteractor
    
     typealias Stubbing = __StubbingProxy_HomeInteractor
     typealias Verification = __VerificationProxy_HomeInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomeInteractor?

     func enableDefaultImplementation(_ stub: HomeInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var presenter: HomePresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    
    
    
     override var worker: HomeWorker {
        get {
            return cuckoo_manager.getter("worker",
                superclassCall:
                    
                    super.worker
                    ,
                defaultCall: __defaultImplStub!.worker)
        }
        
        set {
            cuckoo_manager.setter("worker",
                value: newValue,
                superclassCall:
                    
                    super.worker = newValue
                    ,
                defaultCall: __defaultImplStub!.worker = newValue)
        }
        
    }
    
    
    
     override var response: Home.CarModels.Response? {
        get {
            return cuckoo_manager.getter("response",
                superclassCall:
                    
                    super.response
                    ,
                defaultCall: __defaultImplStub!.response)
        }
        
        set {
            cuckoo_manager.setter("response",
                value: newValue,
                superclassCall:
                    
                    super.response = newValue
                    ,
                defaultCall: __defaultImplStub!.response = newValue)
        }
        
    }
    
    
    
     override var numberOfRows: Int {
        get {
            return cuckoo_manager.getter("numberOfRows",
                superclassCall:
                    
                    super.numberOfRows
                    ,
                defaultCall: __defaultImplStub!.numberOfRows)
        }
        
    }
    

    

    
    
    
     override func getTypeCar(_ number: Int) -> Home.Car {
        
    return cuckoo_manager.call("getTypeCar(_: Int) -> Home.Car",
            parameters: (number),
            escapingParameters: (number),
            superclassCall:
                
                super.getTypeCar(number)
                ,
            defaultCall: __defaultImplStub!.getTypeCar(number))
        
    }
    
    
    
     override func load(car: Home.Car)  {
        
    return cuckoo_manager.call("load(car: Home.Car)",
            parameters: (car),
            escapingParameters: (car),
            superclassCall:
                
                super.load(car: car)
                ,
            defaultCall: __defaultImplStub!.load(car: car))
        
    }
    
    
    
     override func handleSuccess(_ response: Home.CarModels.Response)  {
        
    return cuckoo_manager.call("handleSuccess(_: Home.CarModels.Response)",
            parameters: (response),
            escapingParameters: (response),
            superclassCall:
                
                super.handleSuccess(response)
                ,
            defaultCall: __defaultImplStub!.handleSuccess(response))
        
    }
    
    
    
     override func handleFailure(_ error: Error)  {
        
    return cuckoo_manager.call("handleFailure(_: Error)",
            parameters: (error),
            escapingParameters: (error),
            superclassCall:
                
                super.handleFailure(error)
                ,
            defaultCall: __defaultImplStub!.handleFailure(error))
        
    }
    
    
    
     override func cellForRow(at index: Int) -> Home.CarModels.Carro? {
        
    return cuckoo_manager.call("cellForRow(at: Int) -> Home.CarModels.Carro?",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                super.cellForRow(at: index)
                ,
            defaultCall: __defaultImplStub!.cellForRow(at: index))
        
    }
    

	 struct __StubbingProxy_HomeInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomeInteractor, HomePresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    var worker: Cuckoo.ClassToBeStubbedProperty<MockHomeInteractor, HomeWorker> {
	        return .init(manager: cuckoo_manager, name: "worker")
	    }
	    
	    
	    var response: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomeInteractor, Home.CarModels.Response> {
	        return .init(manager: cuckoo_manager, name: "response")
	    }
	    
	    
	    var numberOfRows: Cuckoo.ClassToBeStubbedReadOnlyProperty<MockHomeInteractor, Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows")
	    }
	    
	    
	    func getTypeCar<M1: Cuckoo.Matchable>(_ number: M1) -> Cuckoo.ClassStubFunction<(Int), Home.Car> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: number) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "getTypeCar(_: Int) -> Home.Car", parameterMatchers: matchers))
	    }
	    
	    func load<M1: Cuckoo.Matchable>(car: M1) -> Cuckoo.ClassStubNoReturnFunction<(Home.Car)> where M1.MatchedType == Home.Car {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.Car)>] = [wrap(matchable: car) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "load(car: Home.Car)", parameterMatchers: matchers))
	    }
	    
	    func handleSuccess<M1: Cuckoo.Matchable>(_ response: M1) -> Cuckoo.ClassStubNoReturnFunction<(Home.CarModels.Response)> where M1.MatchedType == Home.CarModels.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.CarModels.Response)>] = [wrap(matchable: response) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "handleSuccess(_: Home.CarModels.Response)", parameterMatchers: matchers))
	    }
	    
	    func handleFailure<M1: Cuckoo.Matchable>(_ error: M1) -> Cuckoo.ClassStubNoReturnFunction<(Error)> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "handleFailure(_: Error)", parameterMatchers: matchers))
	    }
	    
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ClassStubFunction<(Int), Home.CarModels.Carro?> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "cellForRow(at: Int) -> Home.CarModels.Carro?", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<HomePresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var worker: Cuckoo.VerifyProperty<HomeWorker> {
	        return .init(manager: cuckoo_manager, name: "worker", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var response: Cuckoo.VerifyOptionalProperty<Home.CarModels.Response> {
	        return .init(manager: cuckoo_manager, name: "response", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var numberOfRows: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func getTypeCar<M1: Cuckoo.Matchable>(_ number: M1) -> Cuckoo.__DoNotUse<(Int), Home.Car> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: number) { $0 }]
	        return cuckoo_manager.verify("getTypeCar(_: Int) -> Home.Car", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func load<M1: Cuckoo.Matchable>(car: M1) -> Cuckoo.__DoNotUse<(Home.Car), Void> where M1.MatchedType == Home.Car {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.Car)>] = [wrap(matchable: car) { $0 }]
	        return cuckoo_manager.verify("load(car: Home.Car)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func handleSuccess<M1: Cuckoo.Matchable>(_ response: M1) -> Cuckoo.__DoNotUse<(Home.CarModels.Response), Void> where M1.MatchedType == Home.CarModels.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.CarModels.Response)>] = [wrap(matchable: response) { $0 }]
	        return cuckoo_manager.verify("handleSuccess(_: Home.CarModels.Response)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func handleFailure<M1: Cuckoo.Matchable>(_ error: M1) -> Cuckoo.__DoNotUse<(Error), Void> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return cuckoo_manager.verify("handleFailure(_: Error)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), Home.CarModels.Carro?> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("cellForRow(at: Int) -> Home.CarModels.Carro?", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeInteractorStub: HomeInteractor {
    
    
     override var presenter: HomePresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomePresentationLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var worker: HomeWorker {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomeWorker).self)
        }
        
        set { }
        
    }
    
    
     override var response: Home.CarModels.Response? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Home.CarModels.Response?).self)
        }
        
        set { }
        
    }
    
    
     override var numberOfRows: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     override func getTypeCar(_ number: Int) -> Home.Car  {
        return DefaultValueRegistry.defaultValue(for: (Home.Car).self)
    }
    
     override func load(car: Home.Car)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func handleSuccess(_ response: Home.CarModels.Response)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func handleFailure(_ error: Error)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func cellForRow(at index: Int) -> Home.CarModels.Carro?  {
        return DefaultValueRegistry.defaultValue(for: (Home.CarModels.Carro?).self)
    }
    
}


// MARK: - Mocks generated from file: Car_Clean_Swift/Home/HomePresenter.swift at 2019-12-23 17:43:24 +0000

//
//  HomePresenter.swift
//  Car_Clean_Swift
//
//  Created by Alvaro Vinicius do Nascimento Fernandes on 12/12/19.
//  Copyright (c) 2019 Alvaro Vinicius do Nascimento Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import Cuckoo
@testable import Car_Clean_Swift

import UIKit


 class MockHomePresentationLogic: HomePresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomePresentationLogic
    
     typealias Stubbing = __StubbingProxy_HomePresentationLogic
     typealias Verification = __VerificationProxy_HomePresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomePresentationLogic?

     func enableDefaultImplementation(_ stub: HomePresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func reloadCollection()  {
        
    return cuckoo_manager.call("reloadCollection()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.reloadCollection())
        
    }
    
    
    
     func presentRequestFailureAlert()  {
        
    return cuckoo_manager.call("presentRequestFailureAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentRequestFailureAlert())
        
    }
    

	 struct __StubbingProxy_HomePresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func reloadCollection() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "reloadCollection()", parameterMatchers: matchers))
	    }
	    
	    func presentRequestFailureAlert() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "presentRequestFailureAlert()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomePresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func reloadCollection() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("reloadCollection()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentRequestFailureAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentRequestFailureAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomePresentationLogicStub: HomePresentationLogic {
    

    

    
     func reloadCollection()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentRequestFailureAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockHomePresenter: HomePresenter, Cuckoo.ClassMock {
    
     typealias MocksType = HomePresenter
    
     typealias Stubbing = __StubbingProxy_HomePresenter
     typealias Verification = __VerificationProxy_HomePresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomePresenter?

     func enableDefaultImplementation(_ stub: HomePresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: HomeDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func reloadCollection()  {
        
    return cuckoo_manager.call("reloadCollection()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.reloadCollection()
                ,
            defaultCall: __defaultImplStub!.reloadCollection())
        
    }
    
    
    
     override func presentRequestFailureAlert()  {
        
    return cuckoo_manager.call("presentRequestFailureAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentRequestFailureAlert()
                ,
            defaultCall: __defaultImplStub!.presentRequestFailureAlert())
        
    }
    

	 struct __StubbingProxy_HomePresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomePresenter, HomeDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func reloadCollection() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "reloadCollection()", parameterMatchers: matchers))
	    }
	    
	    func presentRequestFailureAlert() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "presentRequestFailureAlert()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomePresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<HomeDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func reloadCollection() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("reloadCollection()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentRequestFailureAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentRequestFailureAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomePresenterStub: HomePresenter {
    
    
     override var viewController: HomeDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomeDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func reloadCollection()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentRequestFailureAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: Car_Clean_Swift/Home/HomeWorker.swift at 2019-12-23 17:43:24 +0000

//
//  HomeWorker.swift
//  Car_Clean_Swift
//
//  Created by Alvaro Vinicius do Nascimento Fernandes on 12/12/19.
//  Copyright (c) 2019 Alvaro Vinicius do Nascimento Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import Cuckoo
@testable import Car_Clean_Swift

import Foundation
import PromiseKit


 class MockHomeWorker: HomeWorker, Cuckoo.ClassMock {
    
     typealias MocksType = HomeWorker
    
     typealias Stubbing = __StubbingProxy_HomeWorker
     typealias Verification = __VerificationProxy_HomeWorker

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomeWorker?

     func enableDefaultImplementation(_ stub: HomeWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     override func getCarList(car: Home.Car) -> Promise<Home.CarModels.Response> {
        
    return cuckoo_manager.call("getCarList(car: Home.Car) -> Promise<Home.CarModels.Response>",
            parameters: (car),
            escapingParameters: (car),
            superclassCall:
                
                super.getCarList(car: car)
                ,
            defaultCall: __defaultImplStub!.getCarList(car: car))
        
    }
    

	 struct __StubbingProxy_HomeWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func getCarList<M1: Cuckoo.Matchable>(car: M1) -> Cuckoo.ClassStubFunction<(Home.Car), Promise<Home.CarModels.Response>> where M1.MatchedType == Home.Car {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.Car)>] = [wrap(matchable: car) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeWorker.self, method: "getCarList(car: Home.Car) -> Promise<Home.CarModels.Response>", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func getCarList<M1: Cuckoo.Matchable>(car: M1) -> Cuckoo.__DoNotUse<(Home.Car), Promise<Home.CarModels.Response>> where M1.MatchedType == Home.Car {
	        let matchers: [Cuckoo.ParameterMatcher<(Home.Car)>] = [wrap(matchable: car) { $0 }]
	        return cuckoo_manager.verify("getCarList(car: Home.Car) -> Promise<Home.CarModels.Response>", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeWorkerStub: HomeWorker {
    

    

    
     override func getCarList(car: Home.Car) -> Promise<Home.CarModels.Response>  {
        return DefaultValueRegistry.defaultValue(for: (Promise<Home.CarModels.Response>).self)
    }
    
}

